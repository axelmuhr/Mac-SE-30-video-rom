; This is the primary initialization code. Most likely the shortest ever seen.;; PrimaryInit for video cards serves a number of functions:;; 1) initializes the video frame buffer and video output; 2) disables VBL interrupts; 3) displays a 50% dithered gray pattern on the screen; 4) performs any maintenance on Slot Manager structures;; ---------------------------------------------------------------------------				;ARGUMENTS:;	On Entry	A0 = Ptr to SEBlock.;	On Exit		seStatus field = +1 if successful init.;				seStatus field = -1 if error during init.                dc.b   2                ; exec2                dc.b   2                ; sCPU68020                dc.w   0                ; reserved                dc.l   Begin1stInit - *		; offeset to code				WITH spBlock, seBlockBegin1stInit    move.w  #1,2(a0)                suba.w  #$38,sp ; '8'   ; spBlckSize                movea.l sp,a1                move.b  (a0),$31(a1)    ; slot number                clr.b   $33(a1)         ; clear spExtDev (ext. HW device ID)                move.b  #$A0,$32(a1)                movea.l a1,a0                _SDeleteSRTRec                adda.w  #$38,sp ; '8'                movea.l ($1D4).w,a0     ; [GLOBAL VAR] VIA base address                bset    #6,$600(a0)     ; set 6th bit of vDIRA to output                bset    #6,$400(a0)     ; set 6th bit of vDIRB to output                bset    #6,$1E00(a0)    ; 1 = Mainscreen                bset    #6,(a0)         ; 0 = vertical synchronization interrupt disabled;; 'Gray'ing the screen (both pages) by an alternating pattern;  of 10101010 and 01010101;                movea.l #$FEE00000,a1   ; start of VRAM                movea.l a1,a2           ; copy to A2                move.l  #$AAAAAAAA,d5   ; testpattern                adda.l  #$8040,a1       ; 32832 bytes above start (main-screenbase)			                move.w  #$155,d3        ; Thats 342 minus 1 -> Vertical ResP1plotColumn:                                           move.w  #$F,d2P1plotRow:                                              move.l  d5,(a1)+        ; write   testpattern                dbf     d2,P1plotRow    ; 16 times = one 512px line                not.l   d5              ; invert testpattern (AAAAAAAA<->55555555)                dbf     d3,P1plotColumn ; ...and repeat for the whole screen                movea.l a2,a1           ; load base start of VRAM again                adda.w  #$40,a1 ; '@'   ; Just add $40 for alt.screen addr                move.w  #$155,d3        ; Thats 342 minus 1 again ;)P2plotColumn:                                           move.w  #$F,d2P2plotRow:                                              move.l  d5,(a1)+                dbf     d2,P2plotRow                not.l   d5                dbf     d3,P2plotColumn                rts			ENDWITH	